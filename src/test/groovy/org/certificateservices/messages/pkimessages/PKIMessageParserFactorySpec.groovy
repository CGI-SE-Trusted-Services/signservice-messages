package org.certificateservices.messages.pkimessages

import org.certificateservices.messages.DummyMessageSecurityProvider
import org.certificateservices.messages.MessageException
import spock.lang.Specification

@SuppressWarnings("deprecation")
class PKIMessageParserFactorySpec extends Specification {

    Properties config = new Properties()
    DummyMessageSecurityProvider secprov = new DummyMessageSecurityProvider();


    def setup() {
        config.setProperty(DefaultPKIMessageParser.SETTING_SOURCEID, "SomeSourceID")
    }

    def "Test that Default PKI Message Parser is generated by default"() {
        when:
        def result = PKIMessageParserFactory.genPKIMessageParser(secprov, config)
        then:
        assert result instanceof DefaultPKIMessageParser
    }


    def "Test custom generation of message parser and check that it gets initialized"() {
        setup:
        config.setProperty(PKIMessageParserFactory.SETTING_PKIMESSAGEPARSER_IMPL, DummyPKIMessageParser.class.name)
        when:
        def result = PKIMessageParserFactory.genPKIMessageParser(secprov, config)
        then:
        result != null
        result.initCalled
    }

    def "Test invalid classpath generates a PKIMessageException"() {
        setup:
        config.setProperty(PKIMessageParserFactory.SETTING_PKIMESSAGEPARSER_IMPL, "org.notexist.NotExist")
        when:
        PKIMessageParserFactory.genPKIMessageParser(secprov, config)
        then:
        thrown(MessageException)
    }
}
