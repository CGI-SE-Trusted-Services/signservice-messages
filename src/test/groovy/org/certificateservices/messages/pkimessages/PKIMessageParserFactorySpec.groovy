package org.certificateservices.messages.pkimessages

import groovy.mock.interceptor.MockFor

import java.security.PrivateKey
import java.security.cert.X509Certificate;
import java.security.interfaces.RSAPrivateKey;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import org.certificateservices.messages.pkimessages.jaxb.Credential;
import org.certificateservices.messages.pkimessages.jaxb.CredentialStatusList;
import org.certificateservices.messages.pkimessages.jaxb.PKIMessage;
import org.certificateservices.messages.pkimessages.jaxb.RequestStatus;
import org.certificateservices.messages.pkimessages.jaxb.TokenRequest;
import org.certificateservices.messages.DummyMessageSecurityProvider;
import org.certificateservices.messages.MessageException;
import org.certificateservices.messages.pkimessages.DefaultPKIMessageParser;
import org.certificateservices.messages.pkimessages.DummyPKIMessageParser;
import org.certificateservices.messages.pkimessages.PKIMessageParserFactory;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import spock.lang.Specification


@SuppressWarnings("deprecation")
class PKIMessageParserFactorySpec extends Specification {
	
	Properties config = new Properties()
	DummyMessageSecurityProvider secprov = new DummyMessageSecurityProvider();
	

	def setup(){
		config.setProperty(DefaultPKIMessageParser.SETTING_SOURCEID, "SomeSourceID")
	}
	
	@Test
	def "Test that Default PKI Message Parser is generated by default"(){		
		when:
		  def result = PKIMessageParserFactory.genPKIMessageParser(secprov,config)
		then:
		  assert result instanceof DefaultPKIMessageParser
	}

	
	@Test
	def "Test custom generation of message parser and check that it gets initialized"(){
		setup:		  
		  config.setProperty(PKIMessageParserFactory.SETTING_PKIMESSAGEPARSER_IMPL, DummyPKIMessageParser.class.name)
		when:
		  def result = PKIMessageParserFactory.genPKIMessageParser(secprov,config)
		then:
		  result != null
		  result.initCalled
	}
	
	@Test
	def "Test invalid classpath generates a PKIMessageException"(){
		setup:
		  config.setProperty(PKIMessageParserFactory.SETTING_PKIMESSAGEPARSER_IMPL, "org.notexist.NotExist")
		when:
          PKIMessageParserFactory.genPKIMessageParser(secprov,config)
		then:
		 thrown(MessageException)
	}
	
	
}
