//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.signatureservice.messages.sweeid2.dssextenstions1_1.jaxb;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for SignTaskDataType complex type</p>.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.</p>
 * 
 * <pre>{@code
 * <complexType name="SignTaskDataType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element ref="{http://id.elegnamnden.se/csig/1.1/dss-ext/ns}ToBeSignedBytes"/>
 *         <element ref="{http://id.elegnamnden.se/csig/1.1/dss-ext/ns}AdESObject" minOccurs="0"/>
 *         <element ref="{http://id.elegnamnden.se/csig/1.1/dss-ext/ns}Base64Signature" minOccurs="0"/>
 *         <element ref="{http://id.elegnamnden.se/csig/1.1/dss-ext/ns}OtherSignTaskData" minOccurs="0"/>
 *       </sequence>
 *       <attribute name="SignTaskId" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       <attribute name="SigType" use="required">
 *         <simpleType>
 *           <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             <enumeration value="XML"/>
 *             <enumeration value="PDF"/>
 *             <enumeration value="CMS"/>
 *             <enumeration value="ASiC"/>
 *           </restriction>
 *         </simpleType>
 *       </attribute>
 *       <attribute name="AdESType" default="None">
 *         <simpleType>
 *           <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *             <enumeration value="None"/>
 *             <enumeration value="BES"/>
 *             <enumeration value="EPES"/>
 *           </restriction>
 *         </simpleType>
 *       </attribute>
 *       <attribute name="ProcessingRules" type="{http://www.w3.org/2001/XMLSchema}anyURI" />
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SignTaskDataType", propOrder = {
    "toBeSignedBytes",
    "adESObject",
    "base64Signature",
    "otherSignTaskData"
})
public class SignTaskDataType {

    /**
     * The octets that are hashed and signed when generating the signture. For PDF and common
     *                 modes of CMS this is the DER encoded SignedAttributess field. For XML this is the canonicalized
     *                 SignedInfo octets.
     * 
     */
    @XmlElement(name = "ToBeSignedBytes", required = true)
    protected byte[] toBeSignedBytes;
    /**
     * Information in support of AdES signature creation.
     * 
     */
    @XmlElement(name = "AdESObject")
    protected AdESObjectType adESObject;
    /**
     * Result signature bytes
     * 
     */
    @XmlElement(name = "Base64Signature")
    protected Base64SignatureType base64Signature;
    @XmlElement(name = "OtherSignTaskData")
    protected AnyType otherSignTaskData;
    /**
     * A distinguishing id of this sign task which is used to distinguish between multiple
     *                     sign tasks in the same request.
     * 
     */
    @XmlAttribute(name = "SignTaskId")
    protected String signTaskId;
    /**
     * Enumeration of the type of signature the canonical signed information is associated
     *                     with.
     * 
     */
    @XmlAttribute(name = "SigType", required = true)
    protected String sigType;
    /**
     * Specifies the type of AdES signature. BES means that the signing certificate hash must
     *                     be covered by the signature. EPES means that the signing certificate hash and a signature policy
     *                     identifier must be covered by the signature.
     * 
     */
    @XmlAttribute(name = "AdESType")
    protected String adESType;
    /**
     * An identifier for processing rules that must be executed by the signature service when
     *                     processing data in this element.
     * 
     */
    @XmlAttribute(name = "ProcessingRules")
    @XmlSchemaType(name = "anyURI")
    protected String processingRules;

    /**
     * The octets that are hashed and signed when generating the signture. For PDF and common
     *                 modes of CMS this is the DER encoded SignedAttributess field. For XML this is the canonicalized
     *                 SignedInfo octets.
     * 
     * @return
     *     possible object is
     *     byte[]
     */
    public byte[] getToBeSignedBytes() {
        return toBeSignedBytes;
    }

    /**
     * Sets the value of the toBeSignedBytes property.
     * 
     * @param value
     *     allowed object is
     *     byte[]
     * @see #getToBeSignedBytes()
     */
    public void setToBeSignedBytes(byte[] value) {
        this.toBeSignedBytes = value;
    }

    /**
     * Information in support of AdES signature creation.
     * 
     * @return
     *     possible object is
     *     {@link AdESObjectType }
     *     
     */
    public AdESObjectType getAdESObject() {
        return adESObject;
    }

    /**
     * Sets the value of the adESObject property.
     * 
     * @param value
     *     allowed object is
     *     {@link AdESObjectType }
     *     
     * @see #getAdESObject()
     */
    public void setAdESObject(AdESObjectType value) {
        this.adESObject = value;
    }

    /**
     * Result signature bytes
     * 
     * @return
     *     possible object is
     *     {@link Base64SignatureType }
     *     
     */
    public Base64SignatureType getBase64Signature() {
        return base64Signature;
    }

    /**
     * Sets the value of the base64Signature property.
     * 
     * @param value
     *     allowed object is
     *     {@link Base64SignatureType }
     *     
     * @see #getBase64Signature()
     */
    public void setBase64Signature(Base64SignatureType value) {
        this.base64Signature = value;
    }

    /**
     * Gets the value of the otherSignTaskData property.
     * 
     * @return
     *     possible object is
     *     {@link AnyType }
     *     
     */
    public AnyType getOtherSignTaskData() {
        return otherSignTaskData;
    }

    /**
     * Sets the value of the otherSignTaskData property.
     * 
     * @param value
     *     allowed object is
     *     {@link AnyType }
     *     
     */
    public void setOtherSignTaskData(AnyType value) {
        this.otherSignTaskData = value;
    }

    /**
     * A distinguishing id of this sign task which is used to distinguish between multiple
     *                     sign tasks in the same request.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSignTaskId() {
        return signTaskId;
    }

    /**
     * Sets the value of the signTaskId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getSignTaskId()
     */
    public void setSignTaskId(String value) {
        this.signTaskId = value;
    }

    /**
     * Enumeration of the type of signature the canonical signed information is associated
     *                     with.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSigType() {
        return sigType;
    }

    /**
     * Sets the value of the sigType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getSigType()
     */
    public void setSigType(String value) {
        this.sigType = value;
    }

    /**
     * Specifies the type of AdES signature. BES means that the signing certificate hash must
     *                     be covered by the signature. EPES means that the signing certificate hash and a signature policy
     *                     identifier must be covered by the signature.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAdESType() {
        if (adESType == null) {
            return "None";
        } else {
            return adESType;
        }
    }

    /**
     * Sets the value of the adESType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getAdESType()
     */
    public void setAdESType(String value) {
        this.adESType = value;
    }

    /**
     * An identifier for processing rules that must be executed by the signature service when
     *                     processing data in this element.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProcessingRules() {
        return processingRules;
    }

    /**
     * Sets the value of the processingRules property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     * @see #getProcessingRules()
     */
    public void setProcessingRules(String value) {
        this.processingRules = value;
    }

}
